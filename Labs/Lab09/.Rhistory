## [1] '3.3.3'
library(plotly); packageVersion("plotly") # enables creation of interactive graphs, especially helpful for quality plots
library(BiocManager); packageVersion("BiocManager") # the dada2 pipeline
library(BiocManager); packageVersion("BiocManager") # the dada2 pipeline
## [1] ‘1.30.10’
library(dada2); packageVersion("dada2") # the dada2 pipeline
## [1] ‘1.18.0’
library(ShortRead); packageVersion("ShortRead") # dada2 depends on this
## [1] '1.48.0'
library(dplyr); packageVersion("dplyr") # for manipulating data
## [1] '1.0.4’
library(tidyr); packageVersion("tidyr") # for creating the final graph at the end of the pipeline
## [1] ‘1.1.2’
library(Hmisc); packageVersion("Hmisc") # for creating the final graph at the end of the pipeline
## [1] ‘4.4.2’
library(ggplot2); packageVersion("ggplot2") # for creating the final graph at the end of the pipeline
## [1] '3.3.3'
library(plotly); packageVersion("plotly") # enables creation of interactive graphs, especially helpful for quality plots
for (hi in 5) {
print
}
for (hi in 5) {
print ("hi")
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
print()
for (x <- c(1,2,3,4,5) in hi) {
print(x)
}
for (x <- c(1,2,3,4,5) in hi) {
print("x")
}
print("1:5")
for (x <- 1:5) {
print("x")
}
print ("hi")
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
for (x <- 1:5) {
print ("x")
}
for (x <- 1:5) {
print ("x")
}
for (x <- 1:5)) {
print ("x")
}
for (1:5 <- 1:5)) {
print ("x")
}
for (1:5 <- 1:5)) {
print ("x")
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
for (1:5 <- 1:5)) {
print ("x")
}
for (x in 1:5)) {
print ("x")
}
for (x in 1:5)) {
print ("x")
}
for (x in c(1:5)) {
print ("x")
}
for (i in (1:5)) {
print ("x")
}
print ("i")
for (i in (1:5)) {
print ("i")
}
for (i in c(1:5)) {
print ("i")
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
for (i in 1:5) {
print ("i")
}
for (i in 1:5) {
print ("i")
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
for (i in 1:5) {
}
for (hi in c(1,2,3,4,5)) {
print ("hi")
}
# This is important for setting if else loops when the first isn't necessarily accurate so the second will cover
# Other types of practice
X <- c(5, 4, 6.5, 8, 2.3, 6)
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
}
if ( X >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
}
if ( X >= 6 ) {
print(paste("Element #",i,"of X is >= threshold"))
}
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
if ( i >= 6 ) {
print(paste("Element #3”,"of X is >= 6"))
}
}
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
}
if ( i >= 6 ) {
print(paste("Element #3”,"of X is >= 6"))
}
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:X ) {
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:X ) {
if ( X[i] >= 6 ) {
print(paste("Element #", i, "of X is >=6"))
}
}
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( X[i] >= 6 ) {
print(paste("Element #", i, "of X is >=6"))
}
}
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( i >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
}
#Must be Scalar
X <- c(5, 4, 6.5, 8, 2.3, 6)
#Must be Scalar
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( i >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
}
if ( i >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( i >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
}
#Must be Scalar
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( i >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
}
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( X[i] >= 6 ) {
print(paste("Element #", i, "of X is >=6"))
}
}
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
if ( X[i] >= 6 ) { #made this so that the loop goes through all through the vector X
print(paste("Element #",i,"of X is >= 6"))
}
} #moved brace here from third line
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( i >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
}
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( X[i] >= 6 ) {
print(paste("Element #", i, "of X is >=6"))
}
}
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
if ( X[i] >= threshold ) {
print(paste("Element #", i, "of X is >= threshold"))
}
}
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
if ( X[i] >= 6 ) { #made this so that the loop goes through all through the vector X
print(paste("Element #",i,"of X is >= 6"))
}
} #moved brace here from third line
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in X ) {
if ( i >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
}
threshold <- 6
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
if ( X[i] >= threshold ) {
print(paste("Element #", i, "of X is >= threshold"))
}
}
length(X)
install.packages(c("broom", "cli", "data.table", "lubridate", "mgcv", "pillar", "pkgload", "RcppParallel", "rmarkdown", "tibble"))
install.packages(c("lubridate", "tibble"))
install.packages(c("lubridate", "tibble"))
install.packages(c("lubridate", "tibble"))
install.packages(mctoolsr)
install.packages("mctoolsr")
install.packages(c("BiocManager", "callr", "diffobj", "formatR", "processx", "RCurl", "survival", "utf8", "xfun"))
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
str(camData) # The structure of the data in these columns is listed as characters and I think the classes are incorrect and need to be changed.
# I've converted the character lists to factors
camData$Placement <- as.factor(camData$Placement)
camData$Season <- as.factor(camData$Season)
camData$Station <- as.factor(camData$Station)
camData$Species <- as.factor(camData$Species)
str(camData)
setwd("~/Documents/Classes/EBIO5420/CompBioLabsAndHW/Labs/Lab09")
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
str(camData) # The structure of the data in these columns is listed as characters and I think the classes are incorrect and need to be changed.
# I've converted the character lists to factors
camData$Placement <- as.factor(camData$Placement)
camData$Season <- as.factor(camData$Season)
camData$Station <- as.factor(camData$Station)
camData$Species <- as.factor(camData$Species)
str(camData)
ggplot(camData, aes( x = Station, y = Species )) + geom_point
library(dplyr); packageVersion("dplyr") # for manipulating data
library(tidyr); packageVersion("tidyr") # for creating the final graph at the end of the pipeline
ggplot(camData, aes( x = Station, y = Species )) + geom_point
library(ggplot2); packageVersion("ggplot2") # for creating the final graph at the end of the pipeline
ggplot(camData, aes( x = Station, y = Species )) + geom_point
ggplot(camData, aes( x = Station, y = Species )) + geom_point()
NewSeasonTable <-  pivot_wider(camData,
values_from = TotalCount,
names_from = Species),     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
NewSeasonTable <-  pivot_wider(camData,
values_from = TotalCount,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
Sortorder <- order(camData$Species, decreasing)  # not actually necessary
Sortorder <- order(camData$Species)  # not actually necessary
Sortorder
camData
NewSeasonTable <-  pivot_wider(camData,
values_from = Species,
names_from = Station,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
NewSeasonTable <-  pivot_wider(camData,
values_from = Station,
names_from = Species,     #what new columns we want
values_fill = 0)
Sortorder <- order(camData$Species)  # not actually necessary
Sortorder
ggplot(camData, aes( x = Station, y = Species )) + geom_point()
str(camData)
Sortorder <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
Sortorder
NewSeasonTable <-  pivot_wider(camData,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
NewSeasonTable <-  pivot_wider(Sortorder,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
NewSeasonTable
ggplot(NewSeasonTable, aes( x = Station, y = Species )) + geom_point()
ggplot(NewSeasonTable, aes( x = Elephant, y = Impala )) + geom_point()
ggplot(NewSeasonTable, aes( x = Elephant, y = Impala )) +
geom_point()+
geom_smooth (method = lm)
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
str(camData) # The structure of the data in these columns is listed as characters and I think the classes are incorrect and need to be changed.
# I've converted the character lists to factors
camData$Placement <- as.factor(camData$Placement)
camData$Season <- as.factor(camData$Season)
camData$Station <- as.factor(camData$Station)
camData$Species <- as.factor(camData$Species)
str(camData)
Sortorder <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
GroupTable <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
GroupTable
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
str(camData) # The structure of the data in these columns is listed as characters and I think the classes are incorrect and need to be changed.
# I've converted the character lists to factors
camData$Placement <- as.factor(camData$Placement)
camData$Season <- as.factor(camData$Season)
camData$Station <- as.factor(camData$Station)
camData$Species <- as.factor(camData$Species)
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
ggplot(NewSpeciesTable, aes( x = Elephant, y = Impala )) +
geom_point()+
geom_smooth (method = lm)
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
str(camData) # The structure of the data in these columns is listed as characters and I think the classes are incorrect and need to be changed.
# I've converted the character lists to factors
camData$Placement <- as.factor(camData$Placement)
camData$Season <- as.factor(camData$Season)
camData$Station <- as.factor(camData$Station)
camData$Species <- as.factor(camData$Species)
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
NewSpeciesTable
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
GroupSpeciesbyStation
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
ggplot(GroupSpeciesbyStation, aes( x = Elephant, y = Impala )) +
geom_point()+
geom_smooth (method = lm)
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
ggplot(GroupSpeciesbyStation, aes( x = Elephant, y = Impala )) +
geom_point()+
geom_smooth (method = lm)
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
ggplot(NewSpeciesTable, aes( x = Elephant, y = Impala )) +
geom_point()+
geom_smooth (method = lm)
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
str(camData) # The structure of the data in these columns is listed as characters and I think the classes are incorrect and need to be changed.
# I've converted the character lists to factors
camData$Placement <- as.factor(camData$Placement)
camData$Season <- as.factor(camData$Season)
camData$Station <- as.factor(camData$Station)
camData$Species <- as.factor(camData$Species)
str(camData)
smallVec <- camData$DateTime[1:5] # work on small vector for converting the date and time
smallVec2 <- as_datetime(smallVec) # I wanted to see what this would do
smallVec # view changes for comparison
smallVec2 # The as_datetime converted the date incorrectly
?strptime # conversion editor information
smallVec3 <- strptime(as.character(smallVec), "%d/%m/%Y %H:%M") # This worked!
camData$DateTime <- strptime(as.character(camData$DateTime), "%d/%m/%Y %H:%M") # It worked, but removed the times
str(camData)
View(camData)
camData$DateTime <- strptime(as.character(camData$DateTime), "%d/%m/%Y %H:%M") # It worked, but removed the times
str(camData)
View(camData)
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
str(camData) # The structure of the data in these columns is listed as characters and I think the classes are incorrect and need to be changed.
# I've converted the character lists to factors
camData$Placement <- as.factor(camData$Placement)
camData$Season <- as.factor(camData$Season)
camData$Station <- as.factor(camData$Station)
camData$Species <- as.factor(camData$Species)
str(camData)
smallVec <- camData$DateTime[1:5] # work on small vector for converting the date and time
smallVec2 <- as_datetime(smallVec) # I wanted to see what this would do
smallVec # view changes for comparison
smallVec2 # The as_datetime converted the date incorrectly
?strptime # conversion editor information
smallVec3 <- strptime(as.character(smallVec), "%d/%m/%Y %H:%M") # This worked!
smallVec3
camData$DateTime <- strptime(as.character(camData$DateTime), "%d/%m/%Y %H:%M") # It worked, but removed the times
str(camData)
View(camData)
summary(camData$DateTime)
min(camData$DateTime)
max(camData$DateTime)
dates <- as.numeric(format( x = camData$DateTime, "%Y"))
table(dates)
table(dates)
--------------
#Summarizing data table, widening table and plot in scatter plot
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
camData
table(dates)
--------------
#Summarizing data table, widening table and plot in scatter plot
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
table(dates)
--------------
#Summarizing data table, widening table and plot in scatter plot
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
table(dates)
--------------
#Summarizing data table, widening table and plot in scatter plot
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
table(dates)
--------------
#Summarizing data table, widening table and plot in scatter plot
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
table(dates)
--------------
#Summarizing data table, widening table and plot in scatter plot
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     #what new columns we want
values_fill = 0)                   #converts NAs to zeros
ggplot(NewSpeciesTable, aes( x = Elephant, y = Impala )) +
geom_point()+
geom_smooth (method = lm)
table(dates)
GroupSpeciesbyStation <- summarise( group_by(camData, Station, Species),
Freq = n(),
.groups = "drop")
NewSpeciesTable <-  pivot_wider(GroupSpeciesbyStation,
values_from = Freq,
names_from = Species,     # what new columns we want
values_fill = 0)          # converts NAs to zeros
ggplot(NewSpeciesTable, aes( x = Elephant, y = Impala )) +
geom_point()+
geom_smooth (method = lm)
