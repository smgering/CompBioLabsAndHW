setwd("~/Documents/Classes/EBIO5420/CompBioLabsAndHW/Labs/Lab05")
x <- 8
threshold <- 5
if ( x > threshold ) {
print(paste("x is larger than", threshold))
} else {
print(paste("x is smaller than or equal to", threshold))
}
dataLab5 <- read.csv("~/Documents/Classes/EBIO5420/compBioSandbox/CompBio_on_git/Labs/Lab05/ExampleData.csv")
str(dataLab5) # checking what kind of object
length(dataLab5[[1]]) # Checking number of rows
threshold <- 0
n <- length(dataLab5[[1]]) # Checking number of rows
x <- dataLab5$x
str(x)
for( i in 1:n ) {
if (x[i] < threshold ) { # set threshold to below 0
x[i] <- NA # replace values below zero with NA
print(x) # print new dataset with NA values #SMF COMMENT: Delete this print statement
}
}
for( i in 1:n ) {
if (x[i] < threshold ) { # set threshold to below 0
x[i] <- NA # replace values below zero with NA
}
}
threshold <- 0
n <- length(dataLab5[[1]]) # Checking number of rows
x <- dataLab5$x
str(x)
for( i in 1:n ) {
if (x[i] < threshold ) { # set threshold to below 0
x[i] <- NA # replace values below zero with NA
}
}
logicalResults <- is.na(x)
x[logicalResults] <- NaN
x
newResults <- which(is.nan(x))
x[newResults] <- 0
x
FiftyToOneHundred <- subset(dataLab5, x > 50 & x < 100) # subset the values that range between 50 and 100
length(FiftyToOneHundred$x) # the length of the subset values is 498 are between 50 and 100
FiftyToOneHundred
FiftyToOneHundred <- FiftyToOneHundred$x
str(FiftyToOneHundred) # Now we have a vector of the 50 to 100 values
write.csv(x = FiftyToOneHundred, file = "FiftyToOneHundred.csv")
CO2_Emissions_Data <- read.csv("~/Documents/Classes/EBIO5420/compBioSandbox/CompBio_on_git/Labs/Lab04/CO2_data_cut_paste.csv")
which(CO2_Emissions_Data$Gas == 0) # All rows are gas = 0, so row 135 is where it isn't going to be 0
which(CO2_Emissions_Data$Gas == 1) # it is on row 135 in the dataset
CO2_Emissions_Data[135,] #View row 135
EmissionTotal <- subset(CO2_Emissions_Data, Total > 200, Total < 300) #subset total between 200 and 300
EmissionTotal <- subset(CO2_Emissions_Data, Total > 200, Total < 300) #subset total between 200 and 300
head(EmissionTotal$Year) # view first 6 years
tail(EmissionTotal$Year) # view last 6 years
totalGenerations <- 1000
n <- 100 	# initial prey abundance at time t = 1
p <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
t <- 1:totalGenerations
threshold <- 0
prey <- rep(n, totalGenerations) # pre allocated the expected values to stoe the data
pred <- rep(p, totalGenerations)
for ( i in 2:totalGenerations ){
prey[i] <- (prey[i-1] + (r * prey[i-1]) - (a * prey[i-1] * pred[i-1]))
pred[i] <- pred[i-1] + (k * a * prey[i-1] * pred[i-1]) - (m * pred[i-1])
if ( prey[i] < threshold ) {prey[i] <- threshold}
if ( pred[i] < threshold ) { pred[i] <- threshold}
}
print(prey)
print(pred)
plot(t, prey, col="blue" )
points(t, pred, col="red")
lines(t, pred, col="red")
myResults <- data.frame("TimeStep" = t, "PreyAbundance" = prey, "PredatorAbundance" = pred)
View(myResults)
write.csv(x = myResults, file = "PredPreyResults.csv")
myTriFunction <- function(base, height) {
triangleArea <- 0.5 * base * height
return(triangleArea)
}
myTriFunction(10, 9)
myTriFunction(3, 4)
myTriFunction(30, 40)
myTriFunction(10, 10)
45 == myTriFunction(10,7) # This will let me know if its correct by assigning TRUE or FALSE
45 == myTriFunction(10,9)
myAbs <- function( x ) {
for ( i in 1:length(x) ) {
if ( is.na (x[i] ) ) {
} else if ( x[i] < 0 ) {
x[i] <- -x[i]
}
}
return( x )
}
myAbs(-5)
myAbs(-2.3)
myAbs <- function( x ) {
for ( i in 1:length(x) ) {
if ( is.na (x[i] ) ) {
} else if ( x[i] < 0 ) {
x[i] <- -x[i]
}
}
return( x )
}
vector <- c(1.1, 2, 0, -4.3, 9, -12)
myAbs(vector) # This worked!
Fibonacci <- function( n ) {
fibonacci_number <- rep(0, n)
fibonacci_number[2] <- 1
for ( i in 3:n ) {
fibonacci_number[i] <- (fibonacci_number[i-1]) + (fibonacci_number[i-2])
}
return(fibonacci_number)
}
Fibonacci(3)
Fibonacci(8)
Fibonacci(15)
myFunction <- function(x, y) {
simplefunc <- ( x - y )^2
return(simplefunc)
}
myFunction(3, 5) # My function works by returning 4
vector <- c(2, 4, 6)
myFunction(vector, 4) # Impressive, I though that I might have to use length for the vector.
myFunction2 <- function(x) {
y <- length(x)
for ( i in 1:length(y) ) {
func <- sum(x)/y
}
# SMF COMMENT: the for loop is completely unncessary
return(func)
}
vector2 <- c(5, 15, 10)
myFunction2(vector2)
#imported CSV file for Problem 4b prep
dataLab7 <- read.csv("~/Documents/Classes/EBIO5420/compBioSandbox/CompBio_on_git/Labs/Lab07/DataForLab07.csv")
length(dataLab7[[1]]) # Checking number of rows
col_x <- dataLab7$x # create a vector of these numbers
str(col_x)
myFunction2(col_x) # THe function worked and too the average of all of the columnes in the data file
myFunction3 <- function( x ) {
y <- length(x)
for ( i in 1:length(x) ) {
mean <- sum(x[i])/y
func <- sum((x[i] - mean)^2)
}
return(func)
}
myFunction3(col_x)
setwd("~/Documents/Classes/EBIO5420/CompBioLabsAndHW/Labs/Lab08")
t <- 12
t <- 12
n <- 2500
K <- 10000
r <-  0.8
abundance <- rep(n, t) # This is for storing the data prior to running the for loop
for (i in 2:t) {
abundance[i] <- ((abundance[i-1] + ((r * abundance[i-1]) * ((K - abundance[i-1]) / K ))))
}
print(abundance)
# Function Definition
Logistic_Growth <- function( r, K, t, n) {
abundance <- rep(n, t)
for (i in 2:t) {
abundance[i] <- ((abundance[i-1] + ((r * abundance[i-1]) * ((K - abundance[i-1]) / K ))))
}
return(abundance)
}
Logistic_Growth(0.8, 10000, 12, 2500) # It works ven if you change the time value or the initial population size
r <- 0.8
K <- 10000
Logistic_Growth <- function( n, t ) {
abundance <- rep(n, t)
generations <- rep(2:t)
for (i in 2:t) {
abundance[i] <- ((abundance[i-1] + ((r * abundance[i-1]) * ((K - abundance[i-1]) / K ))))
}
return(abundance)
return(generations)
}
myResults <- Logistic_Growth( 2500, 12 )
Logistic_Plot <- plot(myResults, xlab="generations", ylab="abundance") # plot results based on function parameters and change labels
newfunctioncall <- Logistic_Growth( 100, 15 ) # I changed the carrying capacity and initial abundances
myResults <- Logistic_Growth( 2500, 12 )
myResults <- data.frame("generations" = 1:12, "abundance" = myResults)
write.csv(x = myResults, file = "LogisticGrowth.csv", row.names = FALSE)
